function randMat = construct_random_geom(T,nConds,nvp)
% Accepts as input a t x n matrix where t = q*p, with q being the number of
% conditions, p the number of trials per condition, and n the number 
% of neurons. p x n is thus a point cloud around each empirical cluster
% centroid. Output is also a t x n matrix, however this t x n matrix consists
% of C random cluster centroids (sampled from a standard gaussian
% distribution, with the variance across these centroids rescaled to match
% the variance across the means of each of the C empirical points clouds,
% i.e. the empirical cluster centroids), each of which is surrounded by the
% same point cloud as that of the corresponding empirical cluster centroid,
% but rotated (by permuting neurons).
%
% PARAMETERS
% ----------
% T      : nTrials x nNeurons matrix. The i_th row j_th column element is
%          the firing rate of the j_th neuron in the i_th trial. nTrials is
%          evenly divisisble by the number of conditions, with each
%          condition represented by an even number of conditions.
% nConds : Number of task conditions represented among the trials (first
%          dimension of T). 
% Name-Value Pairs (nvp)
%   'addNoise' : This name value pair takes on a value of logical true or
%                false and affects what is returned by the function. If
%                true, the point cloud for each cluster is rotated about
%                its centroid and moved to the location of the new randomly
%                sampled cluster centroid; thus, the function returns a t x
%                n matrix, with t = nTrials. If false, no point clouds are
%                added to cluster centroids, and a CxN matrix is thus
%                returned, with C = nConds.
% 
% RETURNS
% -------
% randMat : Either a t x n matrix (with t = nTrials and n = nNeurons) or a
%           CxN matrix (with C = nConds and N = nNeurons), depending on the
%           value of the 'addNoise' name value pair (see PARAMETERS above).
%           If t x n, the i_th row j_th column element is the firing rate
%           of the j_th neuron on the j_th single trial. If CxN, the i_th
%           row j_th column element is the firing rate of the i_th neuron
%           averaged over all trials of the j_th condition.
%
% Author: Jonathan Chien 7/19/21. Last edit: 4/21/22.
% Based on methods section from Bernardi et al "The Geometry of Abstraction
% in the Hippocampus and Prefrontal Cortex," Cell, 2020.

arguments
    T
    nConds (1,1)
    nvp.addNoise = true 
end

% Get number of neurons and trials and determine number of trials per
% condition.
[nTrials, nNeurons] = size(T);
nTrialsPerCond = nTrials / nConds;
assert(mod(nTrials, nConds) == 0, 'nTrials must be evenly divisible by nConds.')

% Calculate mean of each condition (centroid of each empirical condition
% cluster).
empCentroids = calc_centroids(T, nConds);

% Sample C vectors from standard gaussian distribution.
randomCentroids = randn(nConds, nNeurons);

% Calculate ratio of standard deviation of empirical vs random centroids.
% Careful about the nonlinear properties of variance.
ratio = std(empCentroids, 0, 2) ./ std(randomCentroids, 0, 2);

% Rescale random vectors.
randomCentroids = randomCentroids .* ratio;

% Option to rotate empirical point clouds and move them to the new random
% cluster centroid locations.
if nvp.addNoise
    % For each condition, take mean centered point cloud (MxN) from
    % empirical data, rotate cloud by permuting neurons and add rotated,
    % mean-centered point cloud to synthetic centroid.
    Tnull = NaN(size(T));
    for iCond = 1:nConds
        % Obtain point cloud around current condition.
        MxN = (T((iCond-1)*nTrialsPerCond + 1 : iCond*nTrialsPerCond, :));

        % Obtain mean centered point cloud.
        meanCenteredMxN = MxN - mean(MxN);

        % Perform rotation by permuting neurons.
        permMeanCenteredMxN = meanCenteredMxN(:,randperm(nNeurons));

        % Add rotated mean centered point cloud to current random cluster
        % centroid (this is essentially treating the random vector defining
        % the cluster centroid as a disaplacement vector applied to each
        % row/point of the mean-centered point cloud.
        randomCluster = randomCentroids(iCond,:) + permMeanCenteredMxN;

        % Assign MxN into correct section of function output.
        Tnull((iCond-1)*nTrialsPerCond + 1 : iCond*nTrialsPerCond, :) ...
            = randomCluster;
    end
    
    % If noise was added, return the trials x neurons matrix (where each
    % trial is a point in the point clouds around the centroids).
    randMat = Tnull;
else
    % If no noise added, return the cluster centroids (conditions x
    % neurons matrix).
    randMat = randomCentroids;
end

end
